// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __TauStar_RcppExports_h__
#define __TauStar_RcppExports_h__

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace TauStar {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("TauStar", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("TauStar", "TauStar_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in TauStar");
            }
        }
    }

    inline arma::vec HoeffIndCdfRCPP(arma::vec x, double maxError) {
        typedef SEXP(*Ptr_HoeffIndCdfRCPP)(SEXP,SEXP);
        static Ptr_HoeffIndCdfRCPP p_HoeffIndCdfRCPP = NULL;
        if (p_HoeffIndCdfRCPP == NULL) {
            validateSignature("arma::vec(*HoeffIndCdfRCPP)(arma::vec,double)");
            p_HoeffIndCdfRCPP = (Ptr_HoeffIndCdfRCPP)R_GetCCallable("TauStar", "TauStar_HoeffIndCdfRCPP");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_HoeffIndCdfRCPP(Rcpp::wrap(x), Rcpp::wrap(maxError));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline arma::vec HoeffIndPdfRCPP(arma::vec x, double maxError) {
        typedef SEXP(*Ptr_HoeffIndPdfRCPP)(SEXP,SEXP);
        static Ptr_HoeffIndPdfRCPP p_HoeffIndPdfRCPP = NULL;
        if (p_HoeffIndPdfRCPP == NULL) {
            validateSignature("arma::vec(*HoeffIndPdfRCPP)(arma::vec,double)");
            p_HoeffIndPdfRCPP = (Ptr_HoeffIndPdfRCPP)R_GetCCallable("TauStar", "TauStar_HoeffIndPdfRCPP");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_HoeffIndPdfRCPP(Rcpp::wrap(x), Rcpp::wrap(maxError));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline arma::vec eigenForDiscreteProbs(arma::vec p) {
        typedef SEXP(*Ptr_eigenForDiscreteProbs)(SEXP);
        static Ptr_eigenForDiscreteProbs p_eigenForDiscreteProbs = NULL;
        if (p_eigenForDiscreteProbs == NULL) {
            validateSignature("arma::vec(*eigenForDiscreteProbs)(arma::vec)");
            p_eigenForDiscreteProbs = (Ptr_eigenForDiscreteProbs)R_GetCCallable("TauStar", "TauStar_eigenForDiscreteProbs");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_eigenForDiscreteProbs(Rcpp::wrap(p));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline arma::vec HoeffIndDiscreteCdfRCPP(arma::vec x, arma::vec eigenP, arma::vec eigenQ, double maxError) {
        typedef SEXP(*Ptr_HoeffIndDiscreteCdfRCPP)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_HoeffIndDiscreteCdfRCPP p_HoeffIndDiscreteCdfRCPP = NULL;
        if (p_HoeffIndDiscreteCdfRCPP == NULL) {
            validateSignature("arma::vec(*HoeffIndDiscreteCdfRCPP)(arma::vec,arma::vec,arma::vec,double)");
            p_HoeffIndDiscreteCdfRCPP = (Ptr_HoeffIndDiscreteCdfRCPP)R_GetCCallable("TauStar", "TauStar_HoeffIndDiscreteCdfRCPP");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_HoeffIndDiscreteCdfRCPP(Rcpp::wrap(x), Rcpp::wrap(eigenP), Rcpp::wrap(eigenQ), Rcpp::wrap(maxError));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline arma::vec HoeffIndDiscretePdfRCPP(arma::vec x, arma::vec eigenP, arma::vec eigenQ, double maxError) {
        typedef SEXP(*Ptr_HoeffIndDiscretePdfRCPP)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_HoeffIndDiscretePdfRCPP p_HoeffIndDiscretePdfRCPP = NULL;
        if (p_HoeffIndDiscretePdfRCPP == NULL) {
            validateSignature("arma::vec(*HoeffIndDiscretePdfRCPP)(arma::vec,arma::vec,arma::vec,double)");
            p_HoeffIndDiscretePdfRCPP = (Ptr_HoeffIndDiscretePdfRCPP)R_GetCCallable("TauStar", "TauStar_HoeffIndDiscretePdfRCPP");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_HoeffIndDiscretePdfRCPP(Rcpp::wrap(x), Rcpp::wrap(eigenP), Rcpp::wrap(eigenQ), Rcpp::wrap(maxError));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline arma::vec HoeffIndMixedCdfRCPP(arma::vec x, arma::vec eigenP, double maxError) {
        typedef SEXP(*Ptr_HoeffIndMixedCdfRCPP)(SEXP,SEXP,SEXP);
        static Ptr_HoeffIndMixedCdfRCPP p_HoeffIndMixedCdfRCPP = NULL;
        if (p_HoeffIndMixedCdfRCPP == NULL) {
            validateSignature("arma::vec(*HoeffIndMixedCdfRCPP)(arma::vec,arma::vec,double)");
            p_HoeffIndMixedCdfRCPP = (Ptr_HoeffIndMixedCdfRCPP)R_GetCCallable("TauStar", "TauStar_HoeffIndMixedCdfRCPP");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_HoeffIndMixedCdfRCPP(Rcpp::wrap(x), Rcpp::wrap(eigenP), Rcpp::wrap(maxError));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline arma::vec HoeffIndMixedPdfRCPP(arma::vec x, arma::vec eigenP, double maxError) {
        typedef SEXP(*Ptr_HoeffIndMixedPdfRCPP)(SEXP,SEXP,SEXP);
        static Ptr_HoeffIndMixedPdfRCPP p_HoeffIndMixedPdfRCPP = NULL;
        if (p_HoeffIndMixedPdfRCPP == NULL) {
            validateSignature("arma::vec(*HoeffIndMixedPdfRCPP)(arma::vec,arma::vec,double)");
            p_HoeffIndMixedPdfRCPP = (Ptr_HoeffIndMixedPdfRCPP)R_GetCCallable("TauStar", "TauStar_HoeffIndMixedPdfRCPP");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_HoeffIndMixedPdfRCPP(Rcpp::wrap(x), Rcpp::wrap(eigenP), Rcpp::wrap(maxError));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline Rcpp::NumericVector TStarFastTiesRCPP(NumericVector xNumeric, NumericVector yNumeric) {
        typedef SEXP(*Ptr_TStarFastTiesRCPP)(SEXP,SEXP);
        static Ptr_TStarFastTiesRCPP p_TStarFastTiesRCPP = NULL;
        if (p_TStarFastTiesRCPP == NULL) {
            validateSignature("Rcpp::NumericVector(*TStarFastTiesRCPP)(NumericVector,NumericVector)");
            p_TStarFastTiesRCPP = (Ptr_TStarFastTiesRCPP)R_GetCCallable("TauStar", "TauStar_TStarFastTiesRCPP");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_TStarFastTiesRCPP(Rcpp::wrap(xNumeric), Rcpp::wrap(yNumeric));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<Rcpp::NumericVector >(__result);
    }

    inline Rcpp::NumericVector VTStarFastTiesRCPP(NumericVector xNumeric, NumericVector yNumeric) {
        typedef SEXP(*Ptr_VTStarFastTiesRCPP)(SEXP,SEXP);
        static Ptr_VTStarFastTiesRCPP p_VTStarFastTiesRCPP = NULL;
        if (p_VTStarFastTiesRCPP == NULL) {
            validateSignature("Rcpp::NumericVector(*VTStarFastTiesRCPP)(NumericVector,NumericVector)");
            p_VTStarFastTiesRCPP = (Ptr_VTStarFastTiesRCPP)R_GetCCallable("TauStar", "TauStar_VTStarFastTiesRCPP");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_VTStarFastTiesRCPP(Rcpp::wrap(xNumeric), Rcpp::wrap(yNumeric));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<Rcpp::NumericVector >(__result);
    }

    inline Rcpp::NumericVector TStarFastResampleRCPP(NumericVector xNumeric, NumericVector yNumeric, int numResamples, int sampleSize) {
        typedef SEXP(*Ptr_TStarFastResampleRCPP)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_TStarFastResampleRCPP p_TStarFastResampleRCPP = NULL;
        if (p_TStarFastResampleRCPP == NULL) {
            validateSignature("Rcpp::NumericVector(*TStarFastResampleRCPP)(NumericVector,NumericVector,int,int)");
            p_TStarFastResampleRCPP = (Ptr_TStarFastResampleRCPP)R_GetCCallable("TauStar", "TauStar_TStarFastResampleRCPP");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_TStarFastResampleRCPP(Rcpp::wrap(xNumeric), Rcpp::wrap(yNumeric), Rcpp::wrap(numResamples), Rcpp::wrap(sampleSize));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<Rcpp::NumericVector >(__result);
    }

    inline Rcpp::NumericVector TStarSlowTiesRCPP(NumericVector x, NumericVector y, bool vStat) {
        typedef SEXP(*Ptr_TStarSlowTiesRCPP)(SEXP,SEXP,SEXP);
        static Ptr_TStarSlowTiesRCPP p_TStarSlowTiesRCPP = NULL;
        if (p_TStarSlowTiesRCPP == NULL) {
            validateSignature("Rcpp::NumericVector(*TStarSlowTiesRCPP)(NumericVector,NumericVector,bool)");
            p_TStarSlowTiesRCPP = (Ptr_TStarSlowTiesRCPP)R_GetCCallable("TauStar", "TauStar_TStarSlowTiesRCPP");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_TStarSlowTiesRCPP(Rcpp::wrap(x), Rcpp::wrap(y), Rcpp::wrap(vStat));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<Rcpp::NumericVector >(__result);
    }

}

#endif // __TauStar_RcppExports_h__
